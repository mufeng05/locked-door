import math
import struct


key = """-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA9d/0tTYVPQJgfmzWyQRn
kuZMomm2+jKEi8mFiRIoRLzP/6daOAcZ7UipNcMTA+bii9BTqftTqZmLraHA9FR7
47ZnGnQE7KimRIj+q35fhVCXVS2hna2OYkpKvyMUg6fcXuBQ2tRWjT/0+0y0w1xR
BFUcgGz9RDJrtTQC/4Rf94In95ZcggQlJuSoBvFoPws+X/dH32Zliq4jOAf+Mw1f
3bIPNme7bE3n475JmX2OtLll3tOHyHWcKtjdCgYgXqfWPesyn4FrB13bHJ45TiIg
6TOyTQdS0lHb6/6n+Cn2ofwOsJx07odgRgFdaS3lfSfGK3UKueVg/uSvOes1kWDP
RQIDAQAB
-----END PUBLIC KEY-----"""
key_hex = key.encode('utf-8').hex()
key_hex = [hex(int(key_hex[i:i+2], 16)) for i in range(0, len(key_hex), 2)]
print(key_hex)
reconstructed_floats = [math.sin((int(key_hex[i], 16) - 256 if int(key_hex[i], 16) >= 128 else int(key_hex[i], 16)) / 256.0) for i in range(len(key_hex))]
print(reconstructed_floats)

def format_output_with_newlines_float(hex_list, items_per_line=5):
    rounded_values = [f"{value:.6f}" for value in hex_list]
    formatted_lines = []
    for i in range(0, len(rounded_values), items_per_line):
        line = ", ".join(f"{value}f" for value in rounded_values[i:i+items_per_line])
        formatted_lines.append(line)
    return ",\n".join(formatted_lines)

formatted_output = format_output_with_newlines_float(reconstructed_floats)
# 以逗号分隔的形式输出
print(formatted_output)

reconstructed_hex_data = ''.join([struct.pack('<f', f).hex() for f in reconstructed_floats]).upper()
print(reconstructed_hex_data)


# raw_data
floats = [struct.unpack('<f', bytes.fromhex(reconstructed_hex_data[i:i+8]))[0] for i in range(0, len(reconstructed_hex_data), 8)]
v3 = [0] * len(floats)
for i in range(len(floats)):
    v3[i] = round(math.asin(floats[i]) * 256.0)
    if v3[i] < 0:
        v3[i] = 256 + v3[i]
v3_hex = [hex(x) for x in v3]
v3_hex_str = ''.join(chr(int(x, 16)) for x in v3_hex)
print(v3_hex_str)

def hex_to_little_endian(hex_str):
    # 检查输入是否为有效的十六进制字符串
    if not all(c in '0123456789ABCDEFabcdef' for c in hex_str):
        raise ValueError("Invalid hexadecimal string")
    
    # 确保字符串长度为8的倍数，不足则补零
    if len(hex_str) % 8 != 0:
        hex_str = hex_str.ljust((len(hex_str) // 8 + 1) * 8, '0')
    
    # 分割字符串为每8个字符一组
    chunks = [hex_str[i:i+8] for i in range(0, len(hex_str), 8)]
    
    # 转换每个组为小端序
    little_endian_chunks = []
    for chunk in chunks:
        # 确保每个组有8个字符
        chunk = chunk.ljust(8, '0')
        # 反转字节顺序
        little_endian = ''.join(reversed([chunk[i:i+2] for i in range(0, 8, 2)]))
        # 转换为带0x前缀的格式
        little_endian_chunks.append(f"0x{little_endian}")
    
    return little_endian_chunks

def format_output_with_newlines(hex_list, items_per_line=5):
    formatted_lines = []
    for i in range(0, len(hex_list), items_per_line):
        line = ", ".join(hex_list[i:i+items_per_line])
        formatted_lines.append(line)
    return ",\n".join(formatted_lines)

try:
    result = hex_to_little_endian(reconstructed_hex_data)
    formatted_output = format_output_with_newlines(result)
    # 以逗号分隔的形式输出
    print(formatted_output)
except ValueError as e:
    print(f"Error: {e}")